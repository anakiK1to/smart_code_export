
import json
from pathlib import Path
from typing import Dict, List, Optional
import questionary
import asyncio
import logging
import logging.config
import os
import mimetypes
import getpass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.config.dictConfig({
    'version': 1,
    'formatters': {
        'simple': {
            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'DEBUG',
            'formatter': 'simple',
            'stream': 'ext://sys.stdout'
        },
        'file': {
            'class': 'logging.FileHandler',
            'level': 'DEBUG',
            'formatter': 'simple',
            'filename': 'code_export.log',
            'encoding': 'utf-8'
        }
    },
    'loggers': {
        '__main__': {
            'level': 'DEBUG',
            'handlers': ['console', 'file'],
            'propagate': False
        }
    }
})
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CONFIG_FILE = Path.home() / ".code_export_configs.json"
USER_HOME = Path.home()
DEFAULT_SCAN_DIRS = [
    str(USER_HOME / "Projects"),
    str(USER_HOME / "Dev"),
    str(USER_HOME / "Work"),
    str(USER_HOME / "Code"),
    str(Path.cwd())
]

# –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DEFAULT_CONFIGS = {
    "stacks": {
        "React + TypeScript (Vite)": {
            "extensions": [".ts", ".tsx", ".js", ".jsx", ".css", ".scss", ".html", ".json", ".d.ts"],
            "exclude_dirs": ["node_modules", "dist", ".git", ".vite"],
            "signature_files": ["vite.config.ts", "vite.config.js", "package.json"],
            "projects": {}
        },
        "Python (Django)": {
            "extensions": [".py", ".html", ".css", ".js"],
            "exclude_dirs": ["venv", "__pycache__", ".git"],
            "signature_files": ["manage.py", "requirements.txt"],
            "projects": {}
        }
    },
    "scan_dirs": DEFAULT_SCAN_DIRS
}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def show_menu(title: str, choices: List[Dict], back_text: Optional[str] = None) -> Optional[str]:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –º–µ–Ω—é —Å –æ–ø—Ü–∏–µ–π –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    if not choices and not back_text:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π")
        return None

    menu_choices = choices.copy()
    if back_text:
        menu_choices.append({"name": back_text, "value": None})

    try:
        result = await questionary.select(
            title,
            choices=menu_choices,
            qmark=">",
            pointer="‚Üí"
        ).ask_async()
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é: {e}")
        return None

def load_configs() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    if not CONFIG_FILE.exists():
        return DEFAULT_CONFIGS
    try:
        with CONFIG_FILE.open("r", encoding="utf-8") as f:
            return json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        return DEFAULT_CONFIGS

def save_configs(configs: Dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∏ –≤ —Ñ–∞–π–ª"""
    try:
        CONFIG_FILE.parent.mkdir(parents=True, exist_ok=True)
        with CONFIG_FILE.open("w", encoding="utf-8") as f:
            json.dump(configs, f, indent=2, ensure_ascii=False)
        logger.info("–ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")

def detect_stack(project_path: Path, configs: Dict) -> Optional[str]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞"""
    project_path = project_path.resolve()
    for stack_name, stack_config in configs["stacks"].items():
        for sig_file in stack_config.get("signature_files", []):
            if (project_path / sig_file).exists():
                logger.debug(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–≥–Ω–∞—Ç—É—Ä–Ω—ã–π —Ñ–∞–π–ª {sig_file} –≤ {project_path}")
                return stack_name
    logger.debug(f"–°–∏–≥–Ω–∞—Ç—É—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {project_path}")
    return None

def find_projects(configs: Dict, max_depth: int = 2) -> Dict[str, Dict[str, str]]:
    """–ê–≤—Ç–æ–ø–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    found_projects = {}
    for base_dir in configs.get("scan_dirs", DEFAULT_SCAN_DIRS):
        expanded_dir = Path(base_dir).expanduser().resolve()
        logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {expanded_dir}")
        if not expanded_dir.exists():
            logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {expanded_dir}")
            continue

        try:
            for root, dirs, files in os.walk(expanded_dir):
                current_depth = len(Path(root).relative_to(expanded_dir).parts)
                if current_depth > max_depth:
                    dirs[:] = []
                    continue
                project_path = Path(root)
                logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {project_path}, —Ñ–∞–π–ª—ã: {files}")
                stack_name = detect_stack(project_path, configs)
                if stack_name:
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–æ–µ–∫—Ç: {project_path.name} (—Å—Ç–µ–∫: {stack_name})")
                    found_projects.setdefault(stack_name, {})[project_path.name] = str(project_path)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ {expanded_dir}: {e}")
    if not found_projects:
        logger.info("–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö")
    else:
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {sum(len(projects) for projects in found_projects.values())}")
    return found_projects

def build_project_tree(project_path: Path, extensions: List[str], exclude_dirs: List[str], max_depth: int = None) -> List[Dict]:
    """–°—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∏ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    project_path = project_path.resolve()
    tree = []

    def scan_directory(path: Path, depth: int = 0) -> List[Dict]:
        items = []
        try:
            for item in sorted(path.iterdir()):
                if item.name.lower() in [d.lower() for d in exclude_dirs]:
                    continue
                relative_path = str(item.relative_to(project_path))
                if item.is_dir():
                    if max_depth is not None and depth >= max_depth:
                        continue
                    items.append({
                        "name": f"üìÅ {relative_path}/",
                        "value": {"type": "directory", "path": str(item), "relative": relative_path}
                    })
                    items.extend(scan_directory(item, depth + 1))
                elif item.is_file and any(item.name.lower().endswith(ext.lower()) for ext in extensions):
                    items.append({
                        "name": f"üìÑ {relative_path}",
                        "value": {"type": "file", "path": str(item), "relative": relative_path}
                    })
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ {path}: {e}")
        return items

    tree = scan_directory(project_path)
    return tree

def export_project_code(project_path: str, extensions: List[str], exclude_dirs: List[str], output_file: str, selected_paths: List[str] = None, max_depth: int = None) -> bool:
    """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—É—Ç–µ–π –∏ —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏"""
    project_path = Path(project_path).resolve()
    output_path = Path(output_file).resolve()
    skipped_files = []
    included_files = []
    MAX_LINES_PER_FILE = 1000
    MAX_FILE_SIZE = 1_000_000  # 1MB

    try:
        output_path.parent.mkdir(parents=True, exist_ok=True)
        with output_path.open("w", encoding="utf-8") as f:
            for root, dirs, files in os.walk(project_path):
                logger.debug(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {dirs}")
                dirs[:] = [d for d in dirs if d.lower() not in [ed.lower() for ed in exclude_dirs]]
                logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {root}")
                logger.debug(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {dirs}")

                relative_root = Path(root).relative_to(project_path)
                current_depth = len(relative_root.parts)
                if max_depth is not None and current_depth > max_depth:
                    continue

                for file in files:
                    file_path = Path(root) / file
                    relative_path = file_path.relative_to(project_path)

                    if selected_paths and str(relative_path) not in selected_paths:
                        logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª (–Ω–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—É—Ç—è—Ö): {relative_path}")
                        skipped_files.append(str(relative_path))
                        continue

                    if file_path.stat().st_size > MAX_FILE_SIZE:
                        logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞: {relative_path}")
                        skipped_files.append(str(relative_path))
                        continue

                    if any(file.lower().endswith(ext.lower()) for ext in extensions):
                        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {relative_path}")
                        try:
                            with file_path.open("r", encoding="utf-8") as code_file:
                                content = code_file.read()
                                content_lines = content.splitlines()
                                if len(content_lines) > MAX_LINES_PER_FILE:
                                    logger.warning(f"–§–∞–π–ª {relative_path} –æ–±—Ä–µ–∑–∞–Ω –¥–æ {MAX_LINES_PER_FILE} —Å—Ç—Ä–æ–∫")
                                    content = '\n'.join(content_lines[:MAX_LINES_PER_FILE])
                                f.write(f"\n=== {relative_path} ===\n\n{content}\n")
                                included_files.append(str(relative_path))
                        except UnicodeDecodeError:
                            try:
                                with file_path.open("r", encoding="latin1", errors="ignore") as code_file:
                                    content = code_file.read()
                                    content_lines = content.splitlines()
                                    if len(content_lines) > MAX_LINES_PER_FILE:
                                        logger.warning(f"–§–∞–π–ª {relative_path} –æ–±—Ä–µ–∑–∞–Ω –¥–æ {MAX_LINES_PER_FILE} —Å—Ç—Ä–æ–∫")
                                        content = '\n'.join(content_lines[:MAX_LINES_PER_FILE])
                                    f.write(f"\n=== {relative_path} ===\n\n{content}\n")
                                    included_files.append(str(relative_path))
                                    logger.warning(f"–§–∞–π–ª {relative_path} –ø—Ä–æ—á–∏—Ç–∞–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π latin1")
                            except Exception as e:
                                logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {relative_path}: {e}")
                                skipped_files.append(str(relative_path))
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {relative_path}: {e}")
                            skipped_files.append(str(relative_path))
                    else:
                        logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª (–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º): {relative_path}")
                        skipped_files.append(str(relative_path))

        if skipped_files:
            logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(skipped_files)}")
            logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {', '.join(skipped_files)}")
        logger.info(f"–í–∫–ª—é—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(included_files)}")
        logger.debug(f"–í–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {', '.join(included_files)}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        return False

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def create_new_stack(configs: Dict) -> Dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–∫–∞"""
    try:
        name = await questionary.text(
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–µ–∫–∞:",
            validate=lambda x: x.strip() != "" and x not in configs["stacks"]
        ).ask_async()
        if not name:
            return configs

        extensions = await questionary.text(
            "–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
            default=".py .html .js .css"
        ).ask_async()
        if not extensions:
            return configs

        exclude_dirs = await questionary.text(
            "–ü–∞–ø–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
            default="node_modules .git"
        ).ask_async()
        if not exclude_dirs:
            return configs

        signature_files = await questionary.text(
            "–°–∏–≥–Ω–∞—Ç—É—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
            default="package.json"
        ).ask_async()
        if not signature_files:
            return configs

        configs["stacks"][name] = {
            "extensions": extensions.split(),
            "exclude_dirs": exclude_dirs.split(),
            "signature_files": signature_files.split(),
            "projects": {}
        }
        save_configs(configs)
        print(f"‚úÖ –°—Ç–µ–∫ '{name}' —Å–æ–∑–¥–∞–Ω")
        return configs
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–µ–∫–∞: {e}")
        return configs

async def edit_stack_config(configs: Dict, stack_name: str) -> Dict:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–µ–∫–∞"""
    try:
        current_config = configs["stacks"][stack_name]
        
        extensions = await questionary.text(
            "–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
            default=" ".join(current_config["extensions"])
        ).ask_async()
        if extensions:
            current_config["extensions"] = extensions.split()

        exclude_dirs = await questionary.text(
            "–ü–∞–ø–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
            default=" ".join(current_config["exclude_dirs"])
        ).ask_async()
        if exclude_dirs:
            current_config["exclude_dirs"] = exclude_dirs.split()

        signature_files = await questionary.text(
            "–°–∏–≥–Ω–∞—Ç—É—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
            default=" ".join(current_config["signature_files"])
        ).ask_async()
        if signature_files:
            current_config["signature_files"] = signature_files.split()

        save_configs(configs)
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–µ–∫–∞ '{stack_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        return configs
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–µ–∫–∞: {e}")
        return configs

async def edit_stack(configs: Dict, stack_name: str) -> Dict:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–µ–∫–∞ (–ø—Ä–æ–µ–∫—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)"""
    if stack_name not in configs["stacks"]:
        logger.error(f"–°—Ç–µ–∫ '{stack_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print(f"‚ö†Ô∏è –°—Ç–µ–∫ '{stack_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return configs

    while True:
        action = await show_menu(
            f"üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–∫–æ–º ({stack_name}):",
            choices=[
                {"name": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–µ–∫–∞", "value": "edit_config"},
                {"name": "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –≤—Ä—É—á–Ω—É—é", "value": "add"},
                {"name": "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "value": "remove"},
                {"name": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫–∏", "value": "scan"}
            ],
            back_text="[–ù–∞–∑–∞–¥]"
        )
        if action is None:
            break

        if action == "edit_config":
            configs = await edit_stack_config(configs, stack_name)

        elif action == "add":
            try:
                project_name = await questionary.text(
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:",
                    validate=lambda x: (
                        True if x.strip() == "" else
                        x.strip() != "" and x not in configs["stacks"][stack_name]["projects"]
                    ),
                    qmark=">",
                    instruction="–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –æ—Ç–º–µ–Ω—ã)"
                ).ask_async()
                if not project_name:
                    print("‚ÑπÔ∏è –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω")
                    continue

                print("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
                project_path = await questionary.path(
                    "–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É:",
                    only_directories=True,
                    validate=lambda x: Path(x).is_dir(),
                    qmark=">"
                ).ask_async()
                if not project_path:
                    print("‚ÑπÔ∏è –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω")
                    continue

                resolved_path = Path(project_path).resolve()
                detected_stack = detect_stack(resolved_path, configs)
                if detected_stack != stack_name:
                    logger.warning(
                        f"–ü—Ä–æ–µ–∫—Ç {project_name} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–µ–∫—É {stack_name}. "
                        f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–µ–∫: {detected_stack or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}"
                    )
                    print(
                        f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü—Ä–æ–µ–∫—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å—Ç–µ–∫–∞ {stack_name}. "
                        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ."
                    )
                    if not await questionary.confirm(
                        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞?",
                        default=False
                    ).ask_async():
                        continue

                configs["stacks"][stack_name]["projects"][project_name] = str(resolved_path)
                save_configs(configs)
                logger.info(f"–ü—Ä–æ–µ–∫—Ç '{project_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–µ–∫ {stack_name}")
                print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{project_name}' –¥–æ–±–∞–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")

        elif action == "remove":
            if not configs["stacks"][stack_name]["projects"]:
                print("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                continue

            project = await show_menu(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                choices=[{"name": k, "value": k} for k in configs["stacks"][stack_name]["projects"]],
                back_text="[–ù–∞–∑–∞–¥]"
            )
            if project is None:
                continue

            del configs["stacks"][stack_name]["projects"][project]
            save_configs(configs)
            logger.info(f"–ü—Ä–æ–µ–∫—Ç '{project}' —É–¥–∞–ª—ë–Ω –∏–∑ —Å—Ç–µ–∫–∞ {stack_name}")
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{project}' —É–¥–∞–ª—ë–Ω")

        elif action == "scan":
            found = find_projects(configs)
            if stack_name in found:
                count = 0
                for name, path in found[stack_name].items():
                    if name not in configs["stacks"][stack_name]["projects"]:
                        configs["stacks"][stack_name]["projects"][name] = path
                        count += 1
                save_configs(configs)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {count} –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å—Ç–µ–∫ {stack_name}")
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {count} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            else:
                logger.info(f"–ù–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è —Å—Ç–µ–∫–∞ {stack_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                print("‚ö†Ô∏è –ù–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    return configs

async def configure_scan_dirs(configs: Dict) -> Dict:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–ø–æ–∫ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        current_dirs = " ".join(configs.get("scan_dirs", DEFAULT_SCAN_DIRS))
        new_dirs = await questionary.text(
            "–£–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
            default=current_dirs
        ).ask_async()
        
        if new_dirs is None:
            return configs

        scan_dirs = [str(Path(d).expanduser().resolve()) for d in new_dirs.split()]
        valid_dirs = [d for d in scan_dirs if Path(d).exists()]
        
        if len(valid_dirs) < len(scan_dirs):
            invalid_dirs = set(scan_dirs) - set(valid_dirs)
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏: {', '.join(invalid_dirs)}")
        
        configs["scan_dirs"] = valid_dirs if valid_dirs else DEFAULT_SCAN_DIRS
        save_configs(configs)
        print("‚úÖ –ü–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        return configs
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–∞–ø–æ–∫: {e}")
        return configs

async def export_flow(configs: Dict) -> None:
    """–ü—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–¥–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏"""
    while True:
        stack_name = await show_menu(
            "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–∫:",
            choices=[{"name": k, "value": k} for k in configs["stacks"]],
            back_text="[–ù–∞–∑–∞–¥]"
        )
        if stack_name is None:
            break

        if stack_name not in configs["stacks"]:
            print(f"‚ö†Ô∏è –°—Ç–µ–∫ '{stack_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            continue

        if not configs["stacks"][stack_name]["projects"]:
            print("‚ö†Ô∏è –í —ç—Ç–æ–º —Å—Ç–µ–∫–µ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞–º–∏.")
            continue

        project_choices = [{"name": k, "value": k} for k in configs["stacks"][stack_name]["projects"]]
        project_choices.append({"name": "–£–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –≤—Ä—É—á–Ω—É—é", "value": None})

        project_name = await show_menu(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:",
            choices=project_choices,
            back_text="[–ù–∞–∑–∞–¥ –∫ —Å—Ç–µ–∫–∞–º]"
        )
        if project_name is None:
            continue

        try:
            if project_name is None:
                print("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
                project_path = await questionary.path(
                    "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É:",
                    only_directories=True,
                    validate=lambda x: Path(x).is_dir()
                ).ask_async()
                if not project_path:
                    continue
            else:
                project_path = configs["stacks"][stack_name]["projects"][project_name]

            tree = build_project_tree(
                Path(project_path),
                configs["stacks"][stack_name]["extensions"],
                configs["stacks"][stack_name]["exclude_dirs"]
            )
            tree.insert(0, {"name": "üìÅ –í–µ—Å—å –ø—Ä–æ–µ–∫—Ç", "value": {"type": "all", "path": str(project_path)}})

            selected_items = await questionary.checkbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫–∏/—Ñ–∞–π–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
                choices=tree,
                qmark=">",
                pointer="‚Üí"
            ).ask_async()

            logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∞: {selected_items}")

            if selected_items is None or not isinstance(selected_items, list):
                print("‚ö†Ô∏è –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
                continue
            if not selected_items:
                print("‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω—ã –ø–∞–ø–∫–∏/—Ñ–∞–π–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                continue

            selected_paths = []
            for item in selected_items:
                logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: {item}")
                if item["type"] == "file":
                    selected_paths.append(item["relative"])
                elif item["type"] == "directory":
                    dir_path = Path(item["path"])
                    exclude_dirs_lower = [d.lower() for d in configs["stacks"][stack_name]["exclude_dirs"]]
                    for root, _, files in os.walk(dir_path):
                        root_path = Path(root)
                        if root_path.name.lower() in exclude_dirs_lower:
                            logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (–∏—Å–∫–ª—é—á–µ–Ω–∞): {root}")
                            continue
                        for file in files:
                            file_path = root_path / file
                            if any(file.lower().endswith(ext.lower()) for ext in configs["stacks"][stack_name]["extensions"]):
                                relative_path = str(file_path.relative_to(project_path))
                                selected_paths.append(relative_path)
                                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {relative_path}")
                elif item["type"] == "all":
                    selected_paths = None
                    break

            max_depth = await questionary.text(
                "–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞):",
                validate=lambda x: x.strip() == "" or (x.isdigit() and int(x) >= 0),
                default=""
            ).ask_async()
            max_depth = int(max_depth) if max_depth.strip() else None

            output_file = await questionary.text(
                "–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:",
                default="exported_code.txt"
            ).ask_async()
            if not output_file:
                output_file = "exported_code.txt"

            logger.info(f"–í—ã–±—Ä–∞–Ω—ã –ø—É—Ç–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {selected_paths if selected_paths else '–í–µ—Å—å –ø—Ä–æ–µ–∫—Ç'}")
            logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏: {max_depth if max_depth is not None else '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}")

            if export_project_code(
                project_path,
                configs["stacks"][stack_name]["extensions"],
                configs["stacks"][stack_name]["exclude_dirs"],
                output_file,
                selected_paths,
                max_depth
            ):
                print(f"‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {output_file}")

            if not await questionary.confirm(
                "–•–æ—Ç–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç?",
                default=False
            ).ask_async():
                break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
            print(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
            continue

async def main_flow() -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å"""
    configs = load_configs()

    while True:
        action = await show_menu(
            "üõ†Ô∏è Code Export CLI - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            choices=[
                {"name": "–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–¥–∞", "value": "export"},
                {"name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", "value": "configs"},
                {"name": "–ê–≤—Ç–æ–ø–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤", "value": "discover"},
                {"name": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", "value": "scan_dirs"}
            ],
            back_text="[–í—ã—Ö–æ–¥]"
        )
        if action is None:
            break

        if action == "export":
            if not configs["stacks"]:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–µ–∫–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç–µ–∫ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞–º–∏.")
                continue
            await export_flow(configs)

        elif action == "configs":
            while True:
                config_action = await show_menu(
                    "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏:",
                    choices=[
                        {"name": "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–µ–∫", "value": "new_stack"},
                        {"name": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–µ–∫", "value": "edit_stack"}
                    ],
                    back_text="[–ù–∞–∑–∞–¥]"
                )
                if config_action is None:
                    break

                if config_action == "new_stack":
                    configs = await create_new_stack(configs)
                elif config_action == "edit_stack":
                    stack_name = await show_menu(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                        choices=[{"name": k, "value": k} for k in configs["stacks"]],
                        back_text="[–ù–∞–∑–∞–¥]"
                    )
                    if stack_name is None:
                        continue
                    configs = await edit_stack(configs, stack_name)

        elif action == "discover":
            found = find_projects(configs)
            total = sum(len(projects) for projects in found.values())
            if found:
                for stack, projects in found.items():
                    if stack not in configs["stacks"]:
                        continue
                    for name, path in projects.items():
                        if name not in configs["stacks"][stack]["projects"]:
                            configs["stacks"][stack]["projects"][name] = path
                save_configs(configs)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ {total} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            else:
                print("‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        elif action == "scan_dirs":
            configs = await configure_scan_dirs(configs)

if __name__ == "__main__":
    try:
        asyncio.run(main_flow())
    except KeyboardInterrupt:
        print("\n‚Ñπ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        print("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.")
